---
import Image from "astro/components/Image.astro";
import logo from "../assets/logo.png";

interface DropdownItem {
  label: string;
  href: string;
}

interface NavItem {
  label: string;
  href: string;
  dropdown?: DropdownItem[];
}

const navItems: NavItem[] = [
  { label: "Home", href: "/" },
  {
    label: "About",
    href: "/about",
    dropdown: [
      { label: "Organizational Chart", href: "/about/organizational-chart" },
      { label: "About PSC", href: "/about/psc" },
      { label: "Ex-Chairmen AJK PSC", href: "/about/ex-chairmen" },
      { label: "Composition of Commission", href: "/about/current-composition" },
    ],
  },
  {
    label: "Downloads",
    href: "/downloads",
    dropdown: [
      { label: "syllabus", href: "/downloads/syllabus" },
      { label: "Sample Papers", href: "/downloads/sample-papers" },
      { label: "Application Form", href: "/downloads/application-form" },
      { label: "Tenders", href: "/downloads/tenders" },
    ],
  },
  {
    label: "News",
    href: "/news",
    dropdown: [
      { label: "Latest News", href: "/news/latest-news" },
      { label: "Schedules", href: "/news/schedule" },
      { label: "Policy", href: "/news/policy" },
    ],
  },
  { label: "Gallery", href: "/gallery" },
  { label: "FAQs", href: "/faq" },
  { label: "Contact", href: "/contact" },
];

let isMobileMenuOpen = false;
---

<nav
  class="flex justify-between items-center px-4 sm:px-8 py-4 bg-white shadow-md relative z-50"
>
  <div class="flex items-center gap-2">
    <Image src={logo} alt="logo" class="h-8 sm:h-10 w-auto" />
    <span class="text-xs sm:text-lg font-bold text-green-600 leading-tight"
      >AJK Public Service<br class="sm:hidden" /> Commission</span
    >
  </div>

  <!-- Desktop Navigation -->
  <div class="hidden md:flex items-center gap-8">
    {
      navItems.map((item) => (
        <div class="relative group">
          <a
            href={item.href}
            class="text-gray-900 font-medium hover:text-blue-600 transition-colors flex items-center gap-1"
          >
            {item.label}
            {item.dropdown && (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="m6 9 6 6 6-6" />
              </svg>
            )}
          </a>
          {item.dropdown && (
            <div class="absolute top-full left-0 mt-2 w-64 bg-white border border-gray-200 rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
              <div class="py-2">
                {item.dropdown.map((dropdownItem) => (
                  <a
                    href={dropdownItem.href}
                    class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  >
                    {dropdownItem.label}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      ))
    }
  </div>

  <div class="flex items-center gap-4">
    <div class="hidden md:flex items-center gap-2 relative">
      <input
        type="text"
        placeholder="Search..."
        class="pl-8 pr-4 py-2 border w-42 border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <span class="absolute left-3 top-1/2 -translate-y-1/2">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-400"
        >
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </span>
    </div>

    <div class="hidden md:flex items-center gap-2">
      <button
        class="px-4 py-2 text-white cursor-pointer bg-green-600 hover:bg-green-700 rounded-md transition-colors"
      >
        Apply Now
      </button>
      
    </div>

    <button
      id="mobile-menu-button"
      class="md:hidden text-2xl p-2"
      aria-label="Toggle Menu"
    >
      <span class="menu-icon">â˜°</span>
    </button>
  </div>
</nav>

<!-- Mobile Menu -->
<div
  id="mobile-menu"
  class="hidden md:hidden h-full overflow-y-scroll fixed inset-0 bg-black bg-opacity-50 z-50 transition-all duration-300"
>
  <div
    class="bg-white w-[100%] h-auto max-w-sm ml-auto p-6 transform transition-transform duration-300"
  >
    <div class="flex justify-between items-center mb-8">
      <h2 class="text-xl font-bold text-green-500">Menu</h2>
      <button id="close-menu" class="text-2xl p-2"><?xml version="1.0" encoding="utf-8"?><svg class="h-6 w-6" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="122.88px" height="122.879px" viewBox="0 0 122.88 122.879" enable-background="new 0 0 122.88 122.879" xml:space="preserve"><g><path fill="#FF4141" d="M61.44,0c16.96,0,32.328,6.882,43.453,17.986c11.104,11.125,17.986,26.494,17.986,43.453 c0,16.961-6.883,32.328-17.986,43.453C93.769,115.998,78.4,122.879,61.44,122.879c-16.96,0-32.329-6.881-43.454-17.986 C6.882,93.768,0,78.4,0,61.439C0,44.48,6.882,29.111,17.986,17.986C29.112,6.882,44.48,0,61.44,0L61.44,0z M73.452,39.152 c2.75-2.792,7.221-2.805,9.986-0.026c2.764,2.776,2.775,7.292,0.027,10.083L71.4,61.445l12.077,12.25 c2.728,2.77,2.689,7.256-0.081,10.021c-2.772,2.766-7.229,2.758-9.954-0.012L61.445,71.541L49.428,83.729 c-2.75,2.793-7.22,2.805-9.985,0.025c-2.763-2.775-2.776-7.291-0.026-10.082L51.48,61.435l-12.078-12.25 c-2.726-2.769-2.689-7.256,0.082-10.022c2.772-2.765,7.229-2.758,9.954,0.013L61.435,51.34L73.452,39.152L73.452,39.152z M96.899,25.98C87.826,16.907,75.29,11.296,61.44,11.296c-13.851,0-26.387,5.611-35.46,14.685 c-9.073,9.073-14.684,21.609-14.684,35.459s5.611,26.387,14.684,35.459c9.073,9.074,21.609,14.686,35.46,14.686 c13.85,0,26.386-5.611,35.459-14.686c9.073-9.072,14.684-21.609,14.684-35.459S105.973,35.054,96.899,25.98L96.899,25.98z"/></g></svg></button>
    </div>

    <div class="flex flex-col gap-6">
      {
        navItems.map((item, index) => (
          <div class="space-y-2">
            {item.dropdown ? (
              <button
                data-dropdown-toggle={`dropdown-${index}`}
                class="w-full text-left text-gray-900 font-medium hover:text-blue-600 text-lg flex items-center justify-between"
              >
                {item.label}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="transition-transform duration-200"
                >
                  <path d="m6 9 6 6 6-6" />
                </svg>
              </button>
            ) : (
              <a
                href={item.href}
                class="block text-gray-900 font-medium hover:text-blue-600 text-lg"
              >
                {item.label}
              </a>
            )}

            {item.dropdown && (
              <div
                id={`dropdown-${index}`}
                class="hidden pl-4 space-y-2 border-l-2 border-gray-200"
              >
                {item.dropdown.map((dropdownItem) => (
                  <a
                    href={dropdownItem.href}
                    class="block text-gray-600 hover:text-blue-600 text-base"
                  >
                    {dropdownItem.label}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))
      }

      <div class="relative">
        <input
          type="text"
          placeholder="Search..."
          class="w-full px-4 py-2 border border-gray-200 rounded-md"
        />
        <span class="absolute right-3 top-1/2 -translate-y-1/2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="text-gray-400"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </span>
      </div>

      <button
        class="w-full px-4 py-3 text-white bg-green-600 hover:bg-green-700 rounded-md transition-colors"
      >
        Sign In
      </button>
      <button
        class="w-full px-4 py-3 bg-gray-100 hover:bg-gray-200 border border-gray-300 rounded-md transition-colors"
      >
        Register
      </button>
    </div>
  </div>
</div>

<script>
  class MobileNavigation {
    private mobileMenuButton: HTMLElement | null;
    private closeMenuButton: HTMLElement | null;
    private mobileMenu: HTMLElement | null;
    private menuIcon: Element | null;
    private menuContent: Element | null;
    private dropdownButtons: NodeListOf<Element>;

    constructor() {
      this.mobileMenuButton = document.getElementById("mobile-menu-button");
      this.closeMenuButton = document.getElementById("close-menu");
      this.mobileMenu = document.getElementById("mobile-menu");
      this.menuIcon = this.mobileMenuButton!.querySelector(".menu-icon");
      this.menuContent = this.mobileMenu ? this.mobileMenu.querySelector("div") : null;
      this.dropdownButtons = document.querySelectorAll(
        "[data-dropdown-toggle]"
      );

      this.init();
    }

    init() {
      this.mobileMenuButton?.addEventListener("click", () =>
        this.toggleMenu(true)
      );
      this.closeMenuButton?.addEventListener("click", () =>
        this.toggleMenu(false)
      );
      this.mobileMenu?.addEventListener("click", (e) => {
        if (e.target === this.mobileMenu) {
          this.toggleMenu(false);
        }
      });

      // Initialize dropdown toggles
      this.dropdownButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const dropdownId = button.getAttribute("data-dropdown-toggle");
          const dropdown = document.getElementById(dropdownId!);
          const arrow = button.querySelector("svg");

          if (dropdown) {
            dropdown.classList.toggle("hidden");
            arrow?.classList.toggle("rotate-180");
          }
        });
      });
    }

    toggleMenu(show: boolean) {
      if (this.mobileMenu && this.menuContent) {
        if (show) {
          this.mobileMenu.classList.remove("hidden");
          setTimeout(() => {
            this.menuContent?.classList.remove("translate-x-full");
          }, 10);
          document.body.style.overflow = "hidden";
        } else {
          this.menuContent.classList.add("translate-x-full");
          setTimeout(() => {
            if (this.mobileMenu) {
              this.mobileMenu.classList.add("hidden");
            }
          }, 300);
          document.body.style.overflow = "";
        }
      }
    }
  }

  // Initialize mobile navigation
  new MobileNavigation();
</script>
