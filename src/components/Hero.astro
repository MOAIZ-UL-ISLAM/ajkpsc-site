---
// Hero.astro
import { Image } from 'astro:assets';
import first from '../assets/1.jpg';
import second from '../assets/2.jpg';
import third from '../assets/3.jpg';
import fourth from '../assets/4.jpg';
import fifth from '../assets/5.jpg';


import type { ImageMetadata } from 'astro';

interface CarouselItem {
    image: ImageMetadata;
    title: string;
    description: string;
    buttonText: string;
    buttonLink: string;
}

const carouselItems: CarouselItem[] = [
    {
        image: first,
        title: "Welcome to AJKPSC",
        description: "Serving the community with excellence",
        buttonText: "Learn More",
        buttonLink: "/about"
    },
    {
        image: second,
        title: "Career Opportunities",
        description: "Find your dream job with us",
        buttonText: "View Jobs",
        buttonLink: "/careers"
    },
    {
        image: third,
        title: "Latest Updates",
        description: "Stay informed with recent developments",
        buttonText: "Read More",
        buttonLink: "/news"
    },
    {
        image: fourth,
        title: "Excellence in Service",
        description: "Committed to quality and transparency",
        buttonText: "Our Services",
        buttonLink: "/services"
    },
    {
        image: fifth,
        title: "Get in Touch",
        description: "Connect with us today",
        buttonText: "Contact Us",
        buttonLink: "/contact"
    },
];
---

    <div class="flex transition-transform duration-500" id="carousel">
        {carouselItems.map((item) => (
            <div class="min-w-full h-[80vh] relative">
                <Image
                    src={item.image}
                    alt={item.title}
                    class="w-full h-full object-cover"
                />
                <div class="absolute inset-0  bg-opacity-40 flex flex-col items-center justify-center text-white">
                    <h2 class="text-4xl font-bold mb-4">{item.title}</h2>
                    <p class="text-xl mb-6">{item.description}</p>
                    <a
                        href={item.buttonLink}
                        class="bg-blue-600 hover:bg-blue-700 px-6 py-2 rounded-full transition-colors"
                    >
                        {item.buttonText}
                    </a>
                </div>
            </div>
        ))}
    </div>

    <!-- Navigation Buttons -->
    <button
        class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 p-2 rounded-full"
        id="prevBtn"
    >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
    </button>
    <button
        class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 p-2 rounded-full"
        id="nextBtn"
    >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
    </button>

    <!-- Dots -->
    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
        {carouselItems.map((_, index) => (
            <button
                class="w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-colors dot-btn"
                data-index={index}
            />
        ))}
    </div>
</div>

<script>
    const carousel = document.getElementById('carousel') as HTMLElement;
    const prevBtn = document.getElementById('prevBtn') as HTMLElement;
    const nextBtn = document.getElementById('nextBtn') as HTMLElement;
    const dots = document.querySelectorAll('.dot-btn');
    let currentIndex = 0;
    const totalSlides = 5;

    function updateCarousel() {
        carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
        updateDots();
    }

    function updateDots() {
        dots.forEach((dot, index) => {
            dot.classList.toggle('bg-white', index === currentIndex);
            dot.classList.toggle('bg-white/50', index !== currentIndex);
        });
    }

    prevBtn.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
        updateCarousel();
    });

    nextBtn.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % totalSlides;
        updateCarousel();
    });

    dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            currentIndex = index;
            updateCarousel();
        });
    });

    // Auto-play (optional)
    setInterval(() => {
        currentIndex = (currentIndex + 1) % totalSlides;
        updateCarousel();
    }, 5000);
</script></svg></div>